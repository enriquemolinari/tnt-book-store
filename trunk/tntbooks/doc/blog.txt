- Reglas simples como que el carrito no este vacio, dentro del objeto
- OOP is by definition DD... 
- hablar sobre architectura de modulos, quien depende de quien y porque.
- anemic objects en el ejemplo de infoQ
- hubiera preferido una tabla con herencia para los pedidos no cobrados en lugar de una columna 
-- (ver libro BD de Mendelzon)
- ver bien terminologia de DDD, que es un Entity y Value Object dentro de mi modelo de tntbooks
- Podria hacer alguna aclaracion sobre que algun objeto de dominio solo sirven para este modelo... i.e: el cart usa la editorial...
- no estoy validando "injection" security, deberia?

- algun validate del Customer...
- hay una url de test para testear en forma integrada el Posnet, meter un test
+ Hay un objeto TNTBookStore (es mi clase Editorial) tipo wrapper, que termina guardando la venta en una collection y la compra en el
cliente? asi la venta queda dentro de modelo y al cajero le paso la tarjeta y no el cliente.
--- al final creo que lo complejiza para este ejemplo...  
--- tambien podria hacer el Cart<T>, luego TimedOutCart<T> contains Cart<T> and finally TntBooksCart<T> contains TimedOutCart<T>
----- pero tengo que sacar la validacion de la editorial para que quede reusable en otro dominio
+ Hibernate tiene el concepto de interceptor para injectar las dependencias transient cuando traigo de la BD
+ no puedo devolver objetos inmutables porque hibernate hace lio...

+ Hay una API REST que podria hacer con Spring MVC ... 
++ tiene estado... hay que generar IDs para los Carritos 
-- si en una transation tengo timeout deberia limpiar ese ID del mapa...

